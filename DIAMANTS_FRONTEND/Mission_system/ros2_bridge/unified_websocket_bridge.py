#!/usr/bin/env python3
"""
DIAMANTS - Bridge WebSocket ROS2 Unifi√©
=======================================
Version consolid√©e et optimis√©e pour les drones Crazyflie
"""

import json
import time
import asyncio
import argparse
from typing import Dict, List, Set, Optional
import rclpy
from rclpy.node import Node
from std_msgs.msg import String, Float32
from geometry_msgs.msg import Twist, Vector3
import websockets


class DiamantsBridge(Node):
    """Bridge ROS2 ‚Üî WebSocket unifi√© pour DIAMANTS"""
    
    def __init__(self, ws_host: str = "localhost", ws_port: int = 8765):
        super().__init__('diamants_websocket_bridge')
        
        self.ws_host = ws_host
        self.ws_port = ws_port
        
        # Connexions WebSocket actives
        self.websocket_clients: Set = set()
        
        # Cache donn√©es temps r√©el
        self.telemetry_cache = {
            'crazyflie_telemetry': {},
            'swarm_status': {},
            'mission_data': {},
            'propeller_speeds': {},
            'last_update': time.time()
        }
        
        # Configuration topics ROS2
        self.setup_ros2_interface()
        
        # Serveur WebSocket
        self.websocket_server = None
        
        self.get_logger().info(f"üöÅ DIAMANTS Bridge initialis√© sur {ws_host}:{ws_port}")
    
    def setup_ros2_interface(self):
        """Configuration compl√®te interface ROS2"""
        
        # === SUBSCRIPTIONS (ROS2 ‚Üí WebSocket) ===
        
        # T√©l√©m√©trie Crazyflie individuelle
        self.telemetry_sub = self.create_subscription(
            String, '/crazyflie/telemetry',
            self.on_crazyflie_telemetry, 10
        )
        
        # Position temps r√©el
        self.position_sub = self.create_subscription(
            Vector3, '/crazyflie/position',
            self.on_crazyflie_position, 10
        )
        
        # √âtat essaim global
        self.swarm_status_sub = self.create_subscription(
            String, '/swarm/status',
            self.on_swarm_status, 10
        )
        
        # Donn√©es mission
        self.mission_sub = self.create_subscription(
            String, '/mission/status',
            self.on_mission_status, 10
        )
        
        # Vitesses h√©lices (critique pour animation)
        self.propeller_sub = self.create_subscription(
            String, '/crazyflie/propeller_speeds',
            self.on_propeller_speeds, 10
        )
        
        # === PUBLISHERS (WebSocket ‚Üí ROS2) ===
        
        # Commandes mouvement Crazyflie
        self.cmd_vel_pub = self.create_publisher(
            Twist, '/crazyflie/cmd_vel', 10
        )
        
        # Commandes essaim
        self.swarm_cmd_pub = self.create_publisher(
            String, '/swarm/commands', 10
        )
        
        # Commandes mission
        self.mission_cmd_pub = self.create_publisher(
            String, '/mission/commands', 10
        )
        
        # Param√®tres dynamiques
        self.param_pub = self.create_publisher(
            String, '/diamants/parameters', 10
        )

    # === CALLBACKS ROS2 ‚Üí WebSocket ===
    
    def on_crazyflie_telemetry(self, msg):
        """T√©l√©m√©trie Crazyflie compl√®te"""
        try:
            telemetry_data = json.loads(msg.data)
            telemetry_data['timestamp'] = time.time()
            
            # Mettre √† jour cache
            drone_id = telemetry_data.get('drone_id', 'cf1')
            self.telemetry_cache['crazyflie_telemetry'][drone_id] = telemetry_data
            
            # Diffuser vers clients WebSocket
            asyncio.create_task(self.broadcast_to_clients({
                'type': 'crazyflie_telemetry',
                'drone_id': drone_id,
                'data': telemetry_data
            }))
            
        except Exception as e:
            self.get_logger().debug(f"Erreur t√©l√©m√©trie: {e}")
    
    def on_crazyflie_position(self, msg):
        """Position temps r√©el pour animation fluide"""
        try:
            position_data = {
                'position': {
                    'x': float(msg.x),
                    'y': float(msg.y), 
                    'z': float(msg.z)
                },
                'timestamp': time.time()
            }
            
            # Diffuser imm√©diatement (haute fr√©quence)
            asyncio.create_task(self.broadcast_to_clients({
                'type': 'drone_position',
                'data': position_data
            }))
            
        except Exception as e:
            self.get_logger().debug(f"Erreur position: {e}")
    
    def on_swarm_status(self, msg):
        """√âtat global de l'essaim"""
        try:
            swarm_data = json.loads(msg.data)
            swarm_data['timestamp'] = time.time()
            
            self.telemetry_cache['swarm_status'] = swarm_data
            
            asyncio.create_task(self.broadcast_to_clients({
                'type': 'swarm_status',
                'data': swarm_data
            }))
            
        except Exception as e:
            self.get_logger().debug(f"Erreur swarm status: {e}")
    
    def on_mission_status(self, msg):
        """Donn√©es mission en cours"""
        try:
            mission_data = json.loads(msg.data)
            mission_data['timestamp'] = time.time()
            
            self.telemetry_cache['mission_data'] = mission_data
            
            asyncio.create_task(self.broadcast_to_clients({
                'type': 'mission_status',
                'data': mission_data
            }))
            
        except Exception as e:
            self.get_logger().debug(f"Erreur mission status: {e}")
    
    def on_propeller_speeds(self, msg):
        """CRITIQUE: Vitesses h√©lices pour animation"""
        try:
            propeller_data = json.loads(msg.data)
            propeller_data['timestamp'] = time.time()
            
            # Cache pour nouveaux clients
            drone_id = propeller_data.get('drone_id', 'cf1')
            self.telemetry_cache['propeller_speeds'][drone_id] = propeller_data
            
            # Diffusion imm√©diate (animation temps r√©el)
            asyncio.create_task(self.broadcast_to_clients({
                'type': 'propeller_speeds',
                'drone_id': drone_id,
                'data': propeller_data
            }))
            
        except Exception as e:
            self.get_logger().debug(f"Erreur propeller speeds: {e}")

    # === GESTION WEBSOCKET ===
    
    async def broadcast_to_clients(self, message: Dict):
        """Diffusion optimis√©e vers tous clients"""
        if not self.websocket_clients:
            return
        
        message_json = json.dumps(message)
        disconnected = set()
        
        for websocket in self.websocket_clients.copy():
            try:
                await websocket.send(message_json)
            except websockets.exceptions.ConnectionClosed:
                disconnected.add(websocket)
            except Exception:
                disconnected.add(websocket)
        
        # Nettoyage connexions ferm√©es
        self.websocket_clients -= disconnected

    async def handle_websocket_client(self, websocket, path):
        """Gestion client WebSocket complet"""
        self.websocket_clients.add(websocket)
        client_info = f"{websocket.remote_address[0]}:{websocket.remote_address[1]}"
        self.get_logger().info(f"üîó Nouveau client: {client_info} ({len(self.websocket_clients)} total)")
        
        try:
            # Envoyer √©tat initial
            await self.send_initial_state(websocket)
            
            # Boucle messages client
            async for message in websocket:
                await self.process_websocket_message(websocket, message)
                
        except websockets.exceptions.ConnectionClosed:
            pass
        except Exception as e:
            self.get_logger().debug(f"Erreur client WebSocket: {e}")
        finally:
            self.websocket_clients.discard(websocket)
            self.get_logger().info(f"üîå Client d√©connect√©: {client_info} ({len(self.websocket_clients)} restants)")
    
    async def send_initial_state(self, websocket):
        """√âtat initial pour nouveau client"""
        initial_state = {
            'type': 'initial_state',
            'data': {
                'telemetry': self.telemetry_cache['crazyflie_telemetry'],
                'swarm_status': self.telemetry_cache['swarm_status'],
                'mission_data': self.telemetry_cache['mission_data'],
                'propeller_speeds': self.telemetry_cache['propeller_speeds'],
                'server_time': time.time()
            }
        }
        
        await websocket.send(json.dumps(initial_state))
    
    async def process_websocket_message(self, websocket, message_str: str):
        """Traitement messages WebSocket ‚Üí ROS2"""
        try:
            message = json.loads(message_str)
            msg_type = message.get('type')
            
            if msg_type == 'ping':
                await websocket.send(json.dumps({'type': 'pong', 'timestamp': time.time()}))
            
            elif msg_type == 'cmd_vel':
                await self.handle_cmd_vel(message.get('data', {}))
            
            elif msg_type == 'swarm_command':
                await self.handle_swarm_command(message.get('data', {}))
            
            elif msg_type == 'mission_command':
                await self.handle_mission_command(message.get('data', {}))
            
            elif msg_type == 'set_parameter':
                await self.handle_parameter_change(message.get('data', {}))
                
            elif msg_type == 'get_status':
                await websocket.send(json.dumps({
                    'type': 'current_status',
                    'data': self.telemetry_cache
                }))
            
        except json.JSONDecodeError:
            self.get_logger().warn(f"Message JSON invalide: {message_str[:100]}")
        except Exception as e:
            self.get_logger().error(f"Erreur traitement message: {e}")

    # === HANDLERS COMMANDES ===
    
    async def handle_cmd_vel(self, cmd_data: Dict):
        """CRITIQUE: Commandes mouvement ‚Üí ROS2"""
        try:
            twist_msg = Twist()
            
            # Vitesses lin√©aires
            linear = cmd_data.get('linear', {})
            twist_msg.linear.x = float(linear.get('x', 0.0))
            twist_msg.linear.y = float(linear.get('y', 0.0))
            twist_msg.linear.z = float(linear.get('z', 0.0))
            
            # Vitesses angulaires
            angular = cmd_data.get('angular', {})
            twist_msg.angular.x = float(angular.get('x', 0.0))
            twist_msg.angular.y = float(angular.get('y', 0.0))
            twist_msg.angular.z = float(angular.get('z', 0.0))
            
            # Publier vers ROS2
            self.cmd_vel_pub.publish(twist_msg)
            
            self.get_logger().info(f"üöÅ cmd_vel envoy√©: lin({twist_msg.linear.x:.2f}, {twist_msg.linear.y:.2f}, {twist_msg.linear.z:.2f})")
            
        except Exception as e:
            self.get_logger().error(f"Erreur cmd_vel: {e}")
    
    async def handle_swarm_command(self, cmd_data: Dict):
        """Commandes essaim"""
        try:
            cmd_msg = String()
            cmd_msg.data = json.dumps(cmd_data)
            self.swarm_cmd_pub.publish(cmd_msg)
            
            self.get_logger().info(f"üì° Commande essaim: {cmd_data.get('command')}")
            
        except Exception as e:
            self.get_logger().error(f"Erreur swarm command: {e}")
    
    async def handle_mission_command(self, cmd_data: Dict):
        """Commandes mission"""
        try:
            cmd_msg = String()
            cmd_msg.data = json.dumps(cmd_data)
            self.mission_cmd_pub.publish(cmd_msg)
            
            self.get_logger().info(f"üéØ Commande mission: {cmd_data.get('command')}")
            
        except Exception as e:
            self.get_logger().error(f"Erreur mission command: {e}")
    
    async def handle_parameter_change(self, param_data: Dict):
        """Changement param√®tres dynamiques"""
        try:
            param_msg = String()
            param_msg.data = json.dumps(param_data)
            self.param_pub.publish(param_msg)
            
            self.get_logger().info(f"‚öôÔ∏è Param√®tre modifi√©: {param_data.get('name')}")
            
        except Exception as e:
            self.get_logger().error(f"Erreur parameter change: {e}")

    # === SERVEUR WEBSOCKET ===
    
    async def start_websocket_server(self):
        """D√©marrer serveur WebSocket"""
        async def websocket_handler(websocket):
            """Wrapper pour compatibilit√© WebSocket moderne"""
            # Le path est maintenant accessible via websocket.request_uri ou d√©faut √† '/'
            path = getattr(websocket, 'path', '/') or '/'
            await self.handle_websocket_client(websocket, path)
        
        self.websocket_server = await websockets.serve(
            websocket_handler,
            self.ws_host,
            self.ws_port,
            ping_interval=20,
            ping_timeout=10,
            close_timeout=5
        )
        
        self.get_logger().info(f"‚úÖ Serveur WebSocket actif sur ws://{self.ws_host}:{self.ws_port}")
    
    def run_bridge(self):
        """Ex√©cution bridge (bloquant)"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # D√©marrer serveur WebSocket
            loop.run_until_complete(self.start_websocket_server())
            
            # Boucle infinie
            loop.run_forever()
            
        except KeyboardInterrupt:
            self.get_logger().info("üõë Bridge arr√™t√© par utilisateur")
        finally:
            if self.websocket_server:
                self.websocket_server.close()
            loop.close()


def main():
    """Point d'entr√©e avec gestion arguments"""
    parser = argparse.ArgumentParser(description='DIAMANTS WebSocket Bridge')
    parser.add_argument('--host', default='localhost', help='Host WebSocket')
    parser.add_argument('--port', type=int, default=8765, help='Port WebSocket')
    args = parser.parse_args()
    
    rclpy.init()
    
    try:
        bridge = DiamantsBridge(ws_host=args.host, ws_port=args.port)
        
        # Bridge dans thread s√©par√©
        import threading
        bridge_thread = threading.Thread(target=bridge.run_bridge, daemon=True)
        bridge_thread.start()
        
        # Boucle ROS2 principale
        rclpy.spin(bridge)
        
    except KeyboardInterrupt:
        print("\nüõë DIAMANTS Bridge arr√™t√©")
    finally:
        rclpy.shutdown()


if __name__ == '__main__':
    main()
