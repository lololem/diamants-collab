# Mission Exploration Intelligente DIAMANTS
# ============================================
# Mission utilisant l'intelligence collective récupérée de V4
# Coordiantion autonome et auto-organisation

mission_name: "exploration_intelligente"
description: "Mission d'exploration avec intelligence collective et auto-organisation"
version: "1.0"
author: "DIAMANTS Team"

# === CONFIGURATION GLOBALE ===
config:
  world_file: "warehouse.sdf"  # Monde de test
  simulation: true
  real_hardware: false
  
  # Profil intelligence collective
  swarm_profile: "demo"  # conservative, aggressive, research, demo, performance
  
  # RViz configuration
  rviz_config: "config/rviz_config_slam_optimized.rviz"

# === NŒUDS PRINCIPAUX ===
nodes:
  
  # === SIMULATION ===
  - name: "gazebo_simulation"
    package: "ros_gz_sim"
    executable: "ros_gz_sim"
    namespace: ""
    parameters:
      world_file: "warehouse.sdf"
    output: "screen"
    condition: "simulation"
  
  # === PONT ROS-GAZEBO ===
  - name: "ros_gz_bridge"
    package: "ros_gz_bridge"
    executable: "parameter_bridge"
    namespace: ""
    parameters:
      config_file: "config/ros_gz_bridge_config.yaml"
    condition: "simulation"
  
  # === INTELLIGENCE COLLECTIVE ===
  - name: "intelligence_monitor"
    package: "multi_agent_framework"
    executable: "intelligence_monitor.py"
    namespace: "swarm"
    parameters:
      config_file: "config/swarm/swarm_intelligence_config.yaml"
      profile: "$(var swarm_profile)"
      monitoring.display_detailed: true
    output: "screen"
  
  # === COORDONNATEUR MULTI-AGENTS ===
  - name: "multi_agent_coordinator"
    package: "multi_agent_framework"
    executable: "drone_position_coordinator.py"
    namespace: "team"
    parameters:
      number_of_drones: 6
      enable_swarm_intelligence: true
      swarm_config: "config/swarm/swarm_intelligence_config.yaml"
      anti_collision:
        enable: true
        safe_distance: 2.0
        emergency_distance: 1.0
    output: "screen"
  
  # === MAP MERGER ===
  - name: "map_merger"
    package: "slam_map_merge"
    executable: "map_merge_node"
    namespace: "mapping"
    parameters:
      number_of_robots: 6
      merging_rate: 2.0
      discovery_timeout: 5.0
      estimation_rate: 0.1
      estimation_confidence: 0.9
    output: "log"

# === DRONES AVEC INTELLIGENCE COLLECTIVE ===
drones:
  
  # Drone leader (démarrage immédiat)
  - name: "crazyflie"
    namespace: "crazyflie"
    startup_delay: 0.0
    parameters:
      # Intelligence collective
      swarm_intelligence:
        enable: true
        role: "leader"
        communication_range: 5.0
        exploration_bonus: 3.0
        social_weight: 0.5
      
      # Position initiale
      initial_position: [0.0, 0.0, 0.0]
      target_altitude: 1.0
      
      # SLAM
      slam:
        enable: true
        algorithm: "hector_slam"
        map_topic: "/crazyflie/map"
        scan_topic: "/crazyflie/scan"
    
    nodes:
      - name: "slam_node"
        package: "hector_slam"
        executable: "hector_mapping"
        parameters:
          map_frame: "crazyflie/map"
          base_frame: "crazyflie/base_link"
          odom_frame: "crazyflie/odom"
          map_resolution: 0.05
          map_size: 2048
      
      - name: "swarm_behavior_node"
        package: "multi_agent_framework"
        executable: "swarm_intelligence_node.py"
        parameters:
          config_file: "config/swarm/swarm_intelligence_config.yaml"
          profile: "$(var swarm_profile)"
          drone_id: "crazyflie"
  
  # Drones followers avec auto-organisation
  - name: "crazyflie1"
    namespace: "crazyflie1"
    startup_delay: 2.0
    parameters:
      swarm_intelligence:
        enable: true
        role: "explorer"
        communication_range: 5.0
        exploration_bonus: 2.5
        territorial_radius: 8.0
      
      initial_position: [1.5, 0.0, 0.0]
      target_altitude: 1.0
      
      slam:
        enable: true
        algorithm: "hector_slam"
        map_topic: "/crazyflie1/map"
    
    nodes:
      - name: "slam_node"
        package: "hector_slam"
        executable: "hector_mapping"
        parameters:
          map_frame: "crazyflie1/map"
          base_frame: "crazyflie1/base_link"
      
      - name: "swarm_behavior_node"
        package: "multi_agent_framework"
        executable: "swarm_intelligence_node.py"
        parameters:
          drone_id: "crazyflie1"
  
  - name: "crazyflie2"
    namespace: "crazyflie2"
    startup_delay: 4.0
    parameters:
      swarm_intelligence:
        enable: true
        role: "scout"
        exploration_bonus: 4.0  # Scout plus agressif
        noise_factor: 0.1       # Plus de randomness
      initial_position: [-1.5, 0.0, 0.0]
      target_altitude: 1.0
    
    nodes:
      - name: "slam_node"
        package: "hector_slam"
        executable: "hector_mapping"
      - name: "swarm_behavior_node"
        package: "multi_agent_framework"
        executable: "swarm_intelligence_node.py"
        parameters:
          drone_id: "crazyflie2"
  
  - name: "crazyflie3"
    namespace: "crazyflie3"
    startup_delay: 6.0
    parameters:
      swarm_intelligence:
        enable: true
        role: "mapper"
        social_weight: 0.7      # Plus social (suit le groupe)
        exploration_bonus: 1.5  # Moins explorateur
      initial_position: [0.0, 1.5, 0.0]
      target_altitude: 1.0
    
    nodes:
      - name: "slam_node"
        package: "hector_slam"
        executable: "hector_mapping"
      - name: "swarm_behavior_node"
        package: "multi_agent_framework"
        executable: "swarm_intelligence_node.py"
        parameters:
          drone_id: "crazyflie3"
  
  - name: "crazyflie4"
    namespace: "crazyflie4"
    startup_delay: 8.0
    parameters:
      swarm_intelligence:
        enable: true
        role: "support"
        territorial_radius: 6.0  # Zone plus réduite
        dispersion_force: 2.0    # Force anti-collision renforcée
      initial_position: [0.0, -1.5, 0.0]
      target_altitude: 1.0
    
    nodes:
      - name: "slam_node"
        package: "hector_slam"
        executable: "hector_mapping"
      - name: "swarm_behavior_node"
        package: "multi_agent_framework"
        executable: "swarm_intelligence_node.py"
        parameters:
          drone_id: "crazyflie4"
  
  - name: "crazyflie5"
    namespace: "crazyflie5"
    startup_delay: 10.0
    parameters:
      swarm_intelligence:
        enable: true
        role: "adaptive"
        # Paramètres adaptatifs (changent selon contexte)
        social_learning_rate: 0.02
        adaptation_threshold: 0.3
      initial_position: [1.0, 1.0, 0.0]
      target_altitude: 1.0
    
    nodes:
      - name: "slam_node"
        package: "hector_slam"
        executable: "hector_mapping"
      - name: "swarm_behavior_node"
        package: "multi_agent_framework"
        executable: "swarm_intelligence_node.py"
        parameters:
          drone_id: "crazyflie5"

# === INTERFACE UTILISATEUR ===
interface:
  
  # RViz avec vue spécialisée intelligence collective
  - name: "rviz_swarm"
    package: "rviz2"
    executable: "rviz2"
    parameters:
      config: "config/rviz_swarm_intelligence.rviz"
    output: "screen"
    condition: "$(var enable_rviz)"
  
  # Dashboard temps réel
  - name: "swarm_dashboard"
    package: "multi_agent_framework"
    executable: "swarm_dashboard.py"
    namespace: "interface"
    output: "screen"
    condition: "$(var enable_dashboard)"

# === MONITORING AVANCÉ ===
monitoring:
  
  # Logger intelligence collective
  - name: "swarm_logger"
    package: "multi_agent_framework"
    executable: "swarm_data_logger.py"
    parameters:
      log_directory: "logs/swarm_intelligence"
      log_frequency: 1.0
      metrics:
        - intelligence_scores
        - social_interactions
        - exploration_coverage
        - collision_events
        - phase_transitions
    output: "log"
  
  # Analyseur performance temps réel
  - name: "performance_analyzer"
    package: "multi_agent_framework"
    executable: "swarm_performance_analyzer.py"
    parameters:
      analysis_frequency: 5.0
      report_frequency: 30.0
      adaptation_enabled: true
    output: "log"

# === VARIABLES DE MISSION ===
variables:
  enable_rviz: true
  enable_dashboard: true
  swarm_profile: "demo"
  mission_duration: 600  # 10 minutes
  auto_shutdown: true

# === CONDITIONS D'ARRÊT ===
completion_criteria:
  # Arrêt automatique si objectifs atteints
  coverage_threshold: 85.0  # % de couverture
  exploration_completeness: 0.9
  
  # Arrêt sécurité
  max_collision_events: 5
  min_active_drones: 3
  
  # Arrêt temporel
  max_duration: 600  # secondes

# === POST-MISSION ===
post_mission:
  # Sauvegarde données
  save_maps: true
  save_trajectories: true
  save_intelligence_logs: true
  
  # Génération rapport
  generate_report: true
  report_template: "templates/swarm_intelligence_report.md"
  
  # Cleanup
  cleanup_gazebo: true
  cleanup_rviz: false  # Garder pour analyse